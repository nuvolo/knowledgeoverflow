<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_nuvo_ko.views</name>
        <script><![CDATA[function all_tags_view_def() {
    var view = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewTags",
        controller: tags_ctrl,
        controllerAs: "vm",
        scope: true,
        url: '/tags'
    };

    function tags_ctrl($scope, tagsService) {
        var vm = this;
        vm.tagList = [];

        //Functions for searching using filter box
        tagsService.autoSubscribe(function (tags) {
            vm.tagList = tags;
        });
        vm.filter = '';
        $scope.$watch('vm.filter', function (newVal) {
            if (newVal != '') tagsService.autofillTags(newVal, true);
            else getTop();
        });

        function getTop() {
            tagsService.getTopTags(true).then(function (data) {
                vm.tagList = data;
            });
        }
        getTop();

    }

    return view;
}

function all_questions_view_def() {
    var results = {
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_QuestionsResults',
        scope: false,
        url: '/questions?filter',
        controller: questions_ctrl,
        controllerAs: 'vm'
    };

    function questions_ctrl() {
        var vm = this;
        vm.resultsMethod = 'all';
    }

    return results;
}

function home_view_def() {
    var summary = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewHome",
        controller: summary_ctrl,
        controllerAs: "vm",
        scope: true,
        url: '/home'
    };

    function summary_ctrl(tagsService, resultsService) {
        var vm = this;

        //Most popular tags (top 1/2 of page)
        tagsService.getTopTags()
            .then(function (data) {
                vm.allTags = data;
            });

        //recent questions (bottom 1/2 of page)
        resultsService.query('all', 'newest', '1', {})
            .then(function (data) {
                vm.recents = data.previews;
            });
    }
    return summary;
}

function tag_view_def() {
    var page = {
        url: '/tag/:tag?filter',
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_ViewSearchTags',
        controller: page_ctrl,
        controllerAs: 'vm',
        scope: true
    };

    function page_ctrl($stateParams, tagsService) {
        var vm = this;
        vm.tag = $stateParams.tag;
        vm.watched = false;

        vm.resultsMethod = 'tagSearch';
        vm.params = {
            tag: vm.tag
        };

        tagsService.isWatched(vm.tag).then(function (data) {
            vm.watched = data;
        });

        vm.watch = function (watch) {
            tagsService.watchTag(vm.tag, watch);
            vm.watched = watch;
        };
    }
    return page;
}

function search_view_def() {
    var page = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewSearch",
        controller: page_ctrl,
        controllerAs: "vm",
        scope: true,
        url: '/search?q?filter'
    };

    function page_ctrl($stateParams) {
        var vm = this;
        vm.searchPhrase = $stateParams.q;

        vm.resultsMethod = "search";
        vm.params = {
            phrase: vm.searchPhrase
        };
    }

    return page;
}

function profile_view_def() {
    var profile = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewProfile",
        controller: profile_ctrl,
        controllerAs: "vm",
        scope: true,
        url: '/profile?tab?filter'
    };

    function profile_ctrl($stateParams) {
        var vm = this;
        vm.tab = $stateParams.tab || 'questions';

        vm.resultsMethod = "profile";
        vm.params = {
            type: vm.tab
        };
    }

    return profile;
}

function question_view_def() {
    var summary = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewQuestion",
        controller: summary_ctrl,
        controllerAs: "vm",
        scope: true,
        url: '/questions/{id}'
    };

    function summary_ctrl($transitions, $stateParams, questionService, createService) {
        var vm = this;
        vm.question_id = $stateParams.id;
        vm.noQuestion = false;


        $transitions.onStart({
            from: 'question'
        }, function () {
            if (vm.editorText != '') {
                return confirm("Are you sure you would like to leave? Changes will not be saved");
            }
        });


        questionService.get(vm.question_id);
        questionService.subscribe(function (data) {
            if (data === undefined) vm.noQuestion = true;
            else {
                Object.assign(vm, data);
                sortAnswers();
                vm.editorText = "";
            }
        });

        vm.postNewAnswer = function () {
            if (vm.editorText.length < 10) alert("Answer length must be at least 10 characters");
            else if (vm.editorText.length > 5000) alert("Answer length must be less than 5000 characters. Current length is " + vm.editorText.length + " characters");
            else {
                createService.createAnswer(vm.editorText, vm.question_id)
                    .then(function (data) {
                        vm.editorText = "";
                        vm.answers = data.answers;
                        sortAnswers();
                    });
            }
        };

        function sortAnswers() {
            //Answer sort hierarchy: best answer => votes => oldest
            vm.answers.sort(function (a, b) {
                if (a.answer_id == vm.best_answer) return -1;
                if (b.answer_id == vm.best_answer) return 1;
                if (a.votes !== b.votes) return b.votes - a.votes;
                return new Date(a.time) - new Date(b.time);
            });
        }
    }

    return summary;
}

function ask_view_def() {
    var ask = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewAsk",
        controller: ask_ctrl,
        controllerAs: "vm",
        scope: false,
        url: '/ask'
    };

    function ask_ctrl($transitions, $state, $element, $scope, createService, tagsService) {
        var vm = this;
        vm.tagList = [];
        vm.addedTag = "";
        vm.author = g_user.getFullName();
        vm.time = new Date();
        vm.review = false;

        var questionLoad = false;
        $transitions.onStart({
            from: 'ask'
        }, function () {
            if (!questionLoad && (vm.editorText != '' || vm.newQuestionTitle != undefined)) {
                return confirm("Are you sure you would like to leave? Changes will not be saved");
            }
        });

        //Post logic, go into review mode before posting to table
        vm.postNewQuestion = function () {
            if (vm.editorText.length < 10) alert("Description length must be at least 10 characters");
            else if (vm.editorText.length > 5000) alert("Description length must be less than 5000 characters. Current length is " + vm.editorText.length + " characters");
            else {
                if (vm.review) {
                    createService.createQuestion(vm.newQuestionTitle, vm.editorText, vm.tagList)
                        .then(function (id) {
                            questionLoad = true;
                            $state.go('question', {
                                id: id
                            });
                        });
                }
                vm.review = true;
            }
        };

        //All of the below functions are for the tag input box. Autofill list
        //and logic to finish the tag when you click out or enter
        vm.autofillList = [];
        tagsService.autoSubscribe(function (tags) {
            tags.forEach(function (tag) {
                if (vm.autofillList.indexOf(tag.name) == -1) vm.autofillList.push(tag.name);
            });
        });

        $scope.$watch('vm.addedTag', function (newVal) {
            if (newVal != '') tagsService.autofillTags(newVal);
        });

        $element[0].querySelector('.tags-input').on('blur', function () {
            vm.addTag();
        });

        vm.addTag = function () {
            if (vm.addedTag.length > 0) {
                vm.tagList.push(vm.addedTag);
                vm.tagList = vm.tagList.filter(function (item, pos) {
                    return vm.tagList.indexOf(item) == pos;
                });
                vm.addedTag = "";
                vm.autofillList = [];
            }
        };

        vm.testAddTag = function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                vm.addTag();
            }
        };

        vm.removeTag = function (tag) {
            vm.tagList.splice(vm.tagList.indexOf(tag), 1);
        };
    }

    return ask;
}


function edit_view_def() {

    var edit = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewEdit",
        controller: edit_ctrl,
        controllerAs: "vm",
        scope: true,
        url: '/questions/{qid}/edit?aid'
    };

    function edit_ctrl($stateParams, $scope, $element, $state, questionService, createService, tagsService) {
        var vm = this;
        vm.aid = $stateParams.aid;
        vm.qid = $stateParams.qid;
        vm.type = vm.aid === undefined ? 'q' : 'a';
        vm.noText = false;

        //Load the question or answer data
        questionService.get(vm.qid)
            .then(function (data) {
                if (!data) vm.noText = true;
                else if (vm.type == 'a') {
                    for (var i = 0; i < data.answers.length; i++) {
                        if (data.answers[i].answer_id == vm.aid) vm.editorText = data.answers[i].answer;
                    }
                } else if (vm.type == 'q' && data.question) {
                    vm.questionTitle = data.question;
                    vm.tagList = data.tags;
                    vm.editorText = data.description;
                }
                if (!vm.editorText) vm.noText = true;
            });

        //Post new data to tables, reload question page
        vm.update = function () {
            function reload() {
                $state.go('question', {
                    id: vm.qid
                });
            }
            if (vm.editorText.length < 10) alert((vm.type == 'q' ? 'Description' : 'Answer') + " length must be at least 10 characters");
            else if (vm.editorText.length > 5000) alert((vm.type == 'q' ? 'Description' : 'Answer') + " length must be less than 5000 characters. Current length is " + vm.editorText.length + " characters");
            else {
                if (vm.type == 'q') createService.updateQuestion(vm.qid, vm.questionTitle, vm.editorText, vm.tagList).then(reload);
                else createService.updateAnswer(vm.aid, vm.editorText).then(reload);
            }
        };

        //Again, logic for a tag input
        vm.autofillList = [];
        tagsService.autoSubscribe(function (tags) {
            tags.forEach(function (tag) {
                if (vm.autofillList.indexOf(tag.name) == -1) vm.autofillList.push(tag.name);
            });
        });

        $scope.$watch('vm.addedTag', function (newVal) {
            if (newVal != '') tagsService.autofillTags(newVal);
        });

        $element[0].querySelector('.tags-input').on('blur', function () {
            vm.addTag();
        });

        vm.addTag = function () {
            if (vm.addedTag.length > 0) {
                vm.tagList.push(vm.addedTag);
                vm.tagList = vm.tagList.filter(function (item, pos) {
                    return vm.tagList.indexOf(item) == pos;
                });
                vm.addedTag = "";
                vm.autofillList = [];
            }
        };

        vm.testAddTag = function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                vm.addTag();
            }
        };

        vm.removeTag = function (tag) {
            vm.tagList.splice(vm.tagList.indexOf(tag), 1);
        };
    }

    return edit;
}


function admin_view_def() {
    return {
        template: "<div><a ui-sref='admin_tags'>Tags</a></div>" +
            "<div><a ui-sref='admin_webhook'>Webhook Config</a></div>",
        url: '/admin'
    };
}


function admin_tag_view_def() {
    var view = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewAdminTags",
        scope: true,
        controller: view_ctrl,
        controllerAs: 'vm',
        url: '/admin/tags'
    };

    function view_ctrl($scope, adminService, tagsService) {
        var vm = this;
        vm.sort = 'newest';
        vm.page = 1;
        vm.filter = '';

        vm.list = [];

        vm.nextPage = function () {
            vm.page++;
            updateList();
        };
        vm.lastPage = function () {
            vm.page--;
            if (vm.page < 1) vm.page = 1;
            updateList();
        };

        adminService.subscribe(function (data) {
            vm.list = data.data;
            vm.results = data.results;
            vm.totalPages = Math.ceil(vm.results / data.pageSize);
        });

        function updateList() {
            adminService.getTags(vm.sort, vm.page, vm.filter);
        }

        $scope.$watch('vm.filter', function () {
            vm.page = 1;
            updateList();
        });
        $scope.$watch('vm.sort', function () {
            vm.page = 1;
            updateList();
        });

        vm.state = 'view';

        vm.rename = function (tid, tag) {
            vm.updateName = tag;
            vm.editTag = {
                name: tag,
                tid: tid
            };
            vm.state = 'rename';
        };

        vm.remap = function (tid, tag) {
            vm.editTag = {
                name: tag,
                tid: tid
            };
            vm.state = 'remap';
        };

        vm.saveRename = function () {
            adminService.renameTag(vm.editTag.tid, vm.updateName).then(function (status) {
                if (status == 'fail') alert('Tag renaming failed');
                else window.location.reload();
            });
        };

        vm.remapList = [];
        vm.remapVal = '';

        tagsService.autoSubscribe(function (tags) {
            tags.forEach(function (tag) {
                if (vm.remapList.indexOf(tag.name) == -1) vm.remapList.push(tag.name);
            });
        });

        $scope.$watch('vm.remapVal', function (newVal) {
            if (newVal != '') tagsService.autofillTags(newVal);
        });

        vm.saveRemap = function () {
            var oldTag = vm.editTag.name;
            var newTag = vm.remapVal;
            if (window.confirm('This will remap the tag "' + oldTag + '" to "' + newTag + '". This cannot be undone. Are you sure you wish to proceed?')) {
                adminService.remapTag(vm.editTag.tid, newTag).then(function (status) {
                    if (status == 'fail') alert('Tag remapping failed');
                    else window.location.reload();
                });
            }
        };

    }

    return view;
}

function admin_webhook_view_def() {
    var view = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_ViewAdminWebhooks",
        scope: true,
        controller: view_ctrl,
        controllerAs: 'vm',
        url: '/admin/webhooks'
    };

    function view_ctrl($scope, adminService, tagsService) {
        var vm = this;
        vm.state = 'view';
        vm.instructions = false;
        vm.webhooks = [];

        function refresh() {
            adminService.getWebhooks().then(function (data) {
                vm.state = 'view';
                vm.webhooks = data;
            });
        }
        refresh();

        vm.edit = function (hook) {
            //Copy object by value
            vm.hook = {
                url: hook.url,
                id: hook.id,
                channel: hook.channel,
                tags: hook.tags.slice(0)
            };
            vm.state = 'edit';
        };

        vm.updateWebhook = function () {
            adminService.updateWebhook(vm.hook.id, vm.hook.channel, vm.hook.url, vm.hook.tags)
                .then(refresh);
        };

        vm.newHook = function () {
            vm.state = "create";
            vm.hook = {
                url: '',
                channel: '',
                tags: []
            };
        };

        vm.createWebhook = function () {
            adminService.createWebhook(vm.hook.channel, vm.hook.url, vm.hook.tags)
                .then(refresh);
        };

        vm.delete = function (hook) {
            adminService.deleteWebhook(hook.id)
                .then(refresh);
        };

        vm.removeTag = function (tag) {
            vm.hook.tags.splice(vm.hook.tags.indexOf(tag), 1);
        };

        vm.autofillList = [];
        tagsService.autoSubscribe(function (tags) {
            tags.forEach(function (tag) {
                if (vm.autofillList.indexOf(tag.name) == -1) vm.autofillList.push(tag.name);
            });
        });

        $scope.$watch('vm.newTag', function (newVal) {
            if (newVal != '') tagsService.autofillTags(newVal);
        });


        vm.addTag = function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();

                if (vm.newTag.length > 0) {
                    vm.hook.tags.push(vm.newTag);
                    vm.hook.tags = vm.hook.tags.filter(function (item, pos) {
                        return vm.hook.tags.indexOf(item) == pos;
                    });
                    vm.newTag = "";
                    vm.autofillList = [];
                }
            }
        };
    }
    return view;
}]]></script>
        <script_name>views</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>Nicholas.Durkin@nuvolo.com</sys_created_by>
        <sys_created_on>2019-07-23 20:21:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>aea769cadbb2f3008fdd3df339961934</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>x_nuvo_ko.views</sys_name>
        <sys_package display_value="Knowledge Overflow" source="x_nuvo_ko">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Knowledge Overflow">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_scope>
        <sys_update_name>sys_ui_script_aea769cadbb2f3008fdd3df339961934</sys_update_name>
        <sys_updated_by>nicholas.durkin@nuvolo.com</sys_updated_by>
        <sys_updated_on>2019-07-31 18:45:13</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>

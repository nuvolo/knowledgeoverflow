<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_nuvo_ko.services</name>
        <script><![CDATA[var portalPaths = {
    searchQuestion: '/api/x_nuvo_ko/portal/search_question',
    searchTag: '/api/x_nuvo_ko/portal/search_tag',
    getTopTags: '/api/x_nuvo_ko/portal/get_top_tags',
    autofillTags: '/api/x_nuvo_ko/portal/autofill_tags',
    getQuestion: '/api/x_nuvo_ko/portal/get_question',
    vote: '/api/x_nuvo_ko/portal/vote',
    toggleStarred: '/api/x_nuvo_ko/portal/toggle_starred',
    createAnswer: '/api/x_nuvo_ko/portal/create_answer',
    createQuestion: '/api/x_nuvo_ko/portal/create_question',
    createComment: '/api/x_nuvo_ko/portal/create_comment',
    markBestAnswer: '/api/x_nuvo_ko/portal/mark_best_answer',
    getRecentQuestions: '/api/x_nuvo_ko/portal/get_recent_questions',
    getProfile: '/api/x_nuvo_ko/portal/get_profile',
    watchTag: '/api/x_nuvo_ko/portal/watch_tag',
    queryQuestions: '/api/x_nuvo_ko/portal/query_questions',
    tagIsWatched: '/api/x_nuvo_ko/portal/tag_is_watched',
    updateQuestion: '/api/x_nuvo_ko/portal/update_question',
    updateAnswer: '/api/x_nuvo_ko/portal/update_answer',
    adminGetTags: '/api/x_nuvo_ko/portal/admin_get_tags',
    adminRenameTag: '/api/x_nuvo_ko/portal/rename_tag',
    adminRemapTag: '/api/x_nuvo_ko/portal/remap_tag',
    adminGetWebhooks: '/api/x_nuvo_ko/portal/admin_get_webhooks',
    deleteWebhook: '/api/x_nuvo_ko/portal/delete_webhook',
    updateWebhook: '/api/x_nuvo_ko/portal/update_webhook',
    createWebhook: '/api/x_nuvo_ko/portal/create_webhook',
    createAttachment: '/api/now/table/x_nuvo_ko_attachments',
    eccQueue: '/api/now/table/ecc_queue',
    attachmentApi: '/api/now/v1/attachment',
	fileApi:'/api/now/v1/attachment/file',
	getNotifications: '/api/x_nuvo_ko/portal/get_notifications',
	markNotifications: '/api/x_nuvo_ko/portal/mark_notifications_read',
	deleteNotification: '/api/x_nuvo_ko/portal/delete_notification'
};

function notification_service_def($http){
	
	return {
		remove: function(id){
			var queryString = buildQueryString({
				id: id
			});
			$http.post(portalPaths.deleteNotification + queryString);
		},
		markRead: function(){
			$http.post(portalPaths.markNotifications);
		},
		get: function(){
			return $http.get(portalPaths.getNotifications).then(transformResponse);
		}
	};
}

function buildQueryString(params) {
    //Build the query string with template '?param1=val1&param2=val2...'
    var esc = encodeURIComponent;
    var query = Object.keys(params)
        .map(function (k) {
            return esc(k) + '=' + esc(params[k]);
        })
        .join('&');
    return "?" + query;
}

function transformResponse(res) {
    return res.data.result;
}

function question_service_def($http) {
    var publicApi = {
        get: get,
        subscribe: subscribe,
        markBestAnswer: markBestAnswer,
        toggleStarred: toggleStarred
    };

    var questionSubscribers = [];

    function subscribe(callback) {
        questionSubscribers.push(callback);
    }

    function get(question_id) {
        var queryString = buildQueryString({
            id: question_id
        });
        return $http.get(portalPaths.getQuestion + queryString)
            .then(transformResponse).then(function (result) {
                questionSubscribers.forEach(function (callback) {
                    callback(result);
                });
                return result;
            });
    }

    function markBestAnswer(qid, aid, type) {
        var queryString = buildQueryString({
            qid: qid,
            aid: aid,
            type: type
        });
        return $http.post(portalPaths.markBestAnswer + queryString);
    }

    function toggleStarred(starred, qid) {
        var queryString = buildQueryString({
            starred: starred,
            qid: qid
        });
        $http.post(portalPaths.toggleStarred + queryString);
    }

    return publicApi;
}

function tags_service_def($http) {
    var publicApi = {
        autofillTags: autofillTags,
        getTopTags: getTopTags,
        watchTag: watchTag,
        isWatched: isWatched,
        autoSubscribe: autoSubscribe
    };

    function autofillTags(input, fullView) {
        var query = buildQueryString({
            input: input,
            full: fullView
        });
        return $http.get(portalPaths.autofillTags + query)
            .then(transformResponse).then(autoTagsCallback);
    }
    var autoTagsCallback;

    function autoSubscribe(callback) {
        autoTagsCallback = callback;
    }

    function getTopTags(fullView) {
        var query = buildQueryString({
            full: fullView
        });
        return $http.get(portalPaths.getTopTags + query).then(transformResponse);
    }

    function watchTag(tag, watch) {
        var query = buildQueryString({
            tag: tag,
            watch: watch
        });
        return $http.post(portalPaths.watchTag + query).then(transformResponse);
    }

    function isWatched(tag) {
        var query = buildQueryString({
            tag: tag
        });
        return $http.get(portalPaths.tagIsWatched + query)
            .then(transformResponse);
    }

    return publicApi;
}

function vote_service_def($http) {
    var publicApi = {
        vote: vote,
        get: get,
        subscribe: subscribe
    };

    function vote(dir, id, param) {
        var queryString = buildQueryString({
            dir: dir,
            id: id,
            param: param
        });
        $http.post(portalPaths.vote + queryString);
    }

    function get(id, param) {
        var queryString = buildQueryString({
            id: id,
            param: param
        });
        $http.get(portalPaths.vote + queryString).then(transformResponse)
            .then(function (result) {
                subscribers.forEach(function (callback) {
                    callback(result);
                });
            });
    }

    var subscribers = [];

    function subscribe(callback) {
        subscribers.push(callback);
    }

    return publicApi;
}

function create_service_def($http) {
    var publicApi = {
        createAnswer: createAnswer,
        createQuestion: createQuestion,
        createComment: createComment,
        updateQuestion: updateQuestion,
        updateAnswer: updateAnswer
    };

    function createAnswer(answer, question_id) {
        var queryString = buildQueryString({
            qid: question_id,
            answer: answer
        });
        return $http.post(portalPaths.createAnswer + queryString)
            .then(transformResponse);
    }

    function createQuestion(question, description, tags) {
        var queryString = buildQueryString({
            question: question,
            description: description,
            tags: tags
        });
        return $http.post(portalPaths.createQuestion + queryString)
            .then(transformResponse);
    }

    function createComment(param, id, comment) {
        var queryString = buildQueryString({
            param: param,
            id: id,
            comment: comment
        });
        return $http.post(portalPaths.createComment + queryString)
            .then(transformResponse);
    }

    function updateQuestion(qid, question, description, tags) {
        var queryString = buildQueryString({
            qid: qid,
            question: question,
            description: description,
            tags: tags
        });
        return $http.post(portalPaths.updateQuestion + queryString);
    }

    function updateAnswer(aid, answer) {
        var queryString = buildQueryString({
            aid: aid,
            answer: answer
        });
        return $http.post(portalPaths.updateAnswer + queryString);
    }

    return publicApi;
}

function results_service_def($http) {
    return {
        query: function (method, filter, page, obj) {
            obj.filter = filter;
            obj.page = page;

            var path = (function () {
                switch (method) {
                    case 'all':
                        return 'queryQuestions';
                    case 'profile':
                        return 'getProfile';
                    case 'tagSearch':
                        return 'searchTag';
                    case 'search':
                        return 'searchQuestion';
                    default:
                        return 'queryQuestions';
                }
            })();
            return $http.get(portalPaths[path] + buildQueryString(obj))
                .then(transformResponse);
        }
    };
}

function admin_service_def($http) {
    var publicApi = {
        getTags: getTags,
        subscribe: subscribe,
        renameTag: renameTag,
        remapTag: remapTag,
        getWebhooks: getWebhooks,
        deleteWebhook: deleteWebhook,
        createWebhook: createWebhook,
        updateWebhook: updateWebhook
    };

    function deleteWebhook(hid) {
        var queryString = buildQueryString({
            hid: hid
        });
        return $http.post(portalPaths.deleteWebhook + queryString)
            .then(transformResponse);
    }

    function createWebhook(channel, url, tags) {
        var queryString = buildQueryString({
            channel: channel,
            url: url,
            tags: tags
        });
        return $http.post(portalPaths.createWebhook + queryString)
            .then(transformResponse);
    }

    function updateWebhook(hid, channel, url, tags) {
        var queryString = buildQueryString({
            hid: hid,
            channel: channel,
            url: url,
            tags: tags
        });
        return $http.post(portalPaths.updateWebhook + queryString)
            .then(transformResponse);
    }

    var subscribers = [];

    function subscribe(callback) {
        subscribers.push(callback);
    }

    function getTags(sort, page, search) {
        var queryString = buildQueryString({
            sort: sort,
            page: page,
            search: search
        });

        $http.post(portalPaths.adminGetTags + queryString)
            .then(transformResponse)
            .then(function (result) {
                subscribers.forEach(function (callback) {
                    callback(result);
                });
            });
    }

    function renameTag(tid, newName) {
        var queryString = buildQueryString({
            tid: tid,
            newName: newName
        });
        return $http.post(portalPaths.adminRenameTag + queryString)
            .then(transformResponse);
    }

    function remapTag(tid, mapTag) {
        var queryString = buildQueryString({
            tid: tid,
            mapTag: mapTag
        });
        return $http.post(portalPaths.adminRemapTag + queryString)
            .then(transformResponse);
    }

    function getWebhooks() {
        return $http.get(portalPaths.adminGetWebhooks).then(transformResponse);
    }

    return publicApi;
}


function attachment_service_def($http) {
    return {
        uploadImage: function (content) {
            content = content.split(";base64,");
            var type = content[0].replace("data:", "");
            var encoded_data = content[1];
			//Create a blank entry on the ko table
            return $http.post(portalPaths.createAttachment)
                .then(transformResponse)
                .then(function (img) {
                    var name = "ko-" + ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
                        return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
                    });
					//Attach the image to it
                    var data =
                        "<request><entry><agent>KO Image Upload</agent><topic>AttachmentCreator</topic><name>"
                        .concat(name, ":").concat(type, "</name><source>x_nuvo_ko_attachments:")
                        .concat(img.sys_id, "</source><payload>").concat(encoded_data, "</payload></entry></request>");

                    return $http.post(portalPaths.eccQueue, data, {
                        headers: {
                            'Content-Type': 'text/xml',
                            'Accept': 'application/json'
                        }
                    }).then(transformResponse).then(function (data) {
						//And then query the attachment download link
                        return $http.get(portalPaths.attachmentApi + '?sysparm_query=file_name=' + name)
                            .then(transformResponse)
                            .then(function (data) {
                                return data[0].download_link;
                            });
                    });
                });

        },

        upload: function (file) {
			//Create blank attachment entry, upload the attachment to it, and return a link
            return $http.post(portalPaths.createAttachment)
                .then(transformResponse).then(function (obj) {
                    var queryString = buildQueryString({
                        file_name: file.name,
                        table_name: 'x_nuvo_ko_attachments',
                        table_sys_id: obj.sys_id
                    });
                    return $http.post(portalPaths.fileApi + queryString, file, {
                        headers: {
                            'Content-Type': file.type,
                            'Accept': 'application/json'
                        }
                    }).then(transformResponse).then(function (data) {
                        return {
                            link: data.download_link,
                            name: file.name
                        };
                    });
                });
        }
    };
}
]]></script>
        <script_name>services</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>Nicholas.Durkin@nuvolo.com</sys_created_by>
        <sys_created_on>2019-07-15 19:56:20</sys_created_on>
        <sys_id>8455542bdb6e3b408fdd3df3399619a4</sys_id>
        <sys_mod_count>59</sys_mod_count>
        <sys_name>x_nuvo_ko.services</sys_name>
        <sys_package display_value="Knowledge Overflow" source="x_nuvo_ko">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Knowledge Overflow">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_scope>
        <sys_update_name>sys_ui_script_8455542bdb6e3b408fdd3df3399619a4</sys_update_name>
        <sys_updated_by>nicholas.durkin@nuvolo.com</sys_updated_by>
        <sys_updated_on>2019-08-05 18:25:32</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>

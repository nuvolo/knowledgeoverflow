<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_nuvo_ko.TagUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TagUtil</name>
        <script><![CDATA[var TagUtil = Class.create();
TagUtil.prototype = {
    initialize: function () {
        this.table = {
            tag: 'x_nuvo_ko_tags',
            tagQuestion: 'x_nuvo_ko_m2m_tags_questions',
            watchedTags: 'x_nuvo_ko_watched_tags',
            question: 'x_nuvo_ko_questions'
        };
    },

    //Top tags by number of questions tagged
    getTopTags: function (expandedResults) {
        var gr = new GlideRecord(this.table.tag);
        gr.orderByDesc('questions');
        gr.chooseWindow(0, expandedResults ? 20 : 8);
        gr.query();
        var list = [];
        while (gr.next()) {
            list.push({
                name: gr.getValue('tag'),
                count: gr.getValue('questions')
            });
        }
        return list;
    },
    //Take input search, find applicable tags, and sort by questions tagged
    autofillTags: function (tagSearch, expandedResults) {
        expandedResults = false;
        var list = [];
        var gr = new GlideRecord(this.table.tag);
        gr.addQuery('tag', 'CONTAINS', tagSearch);
        gr.orderByDesc('questions');
        gr.chooseWindow(0, expandedResults ? 20 : 10);
        gr.query();
        while (gr.next()) {
            list.push({
                name: gr.getValue('tag'),
                count: gr.getValue('questions')
            });
        }
        return list;

    },
    getTagsForQuestion: function (qid) {
        var gr = new GlideRecord(this.table.tagQuestion);
        gr.addQuery('questions', qid);
        gr.query();
        var tags = [];
        while (gr.next()) {
            tags.push(gr.getElement('tags').getRefRecord().getValue('tag'));
        }
        return tags;
    },

    //Find tagID, create tag if does not exist
    getTagId: function (tag, preventCreateNew) {
        var gr = new GlideRecord(this.table.tag);
        gr.addQuery('tag', tag);
        gr.query();

        if (gr.getRowCount() == 1) {
            gr.next();
            return gr.getValue('sys_id');
        } else if (!preventCreateNew) {
            gr.initialize();
            gr.tag = tag;
            return gr.insert();
        }

    },

    stripTags: function (qid) {
        var gr = new GlideRecord(this.table.tagQuestion);
        gr.addQuery('questions', qid);
        gr.deleteMultiple();
    },

    tagQuestion: function (qid, tag) {
        var tid = this.getTagId(tag);
        var gr = new GlideRecord(this.table.tagQuestion);
        gr.initialize();
        gr.questions = qid;
        gr.tags = tid;
        return gr.insert();
    },

    //Occurs when you click on a tag and it pulls all relevant results
    search: function (tag, filter, page) {

        var gr = new GlideRecord(this.table.question);
        var grj = gr.addJoinQuery(this.table.tagQuestion);
        grj.addCondition('tags', this.getTagId(tag));

        return new x_nuvo_ko.QuestionUtil().paginate(gr, filter, page);
    },

    isWatched: function (tag) {
        var gr = new GlideRecord(this.table.watchedTags);
        gr.addQuery('userid', gs.getUserID());
        gr.addQuery('tag', this.getTagId(tag));
        gr.query();
        return gr.getRowCount() > 0;
    },

    toggleWatch: function (tag, watch) {
        var gr = new GlideRecord(this.table.watchedTags);
        var tid = this.getTagId(tag);
        if (watch) {
            gr.initialize();
            gr.userid = gs.getUserID();
            gr.tag = tid;
            gr.insert();
        } else {
            gr.addQuery('tag', tid);
            gr.addQuery('userid', gs.getUserID());
            gr.query();
            while (gr.next()) gr.deleteRecord();
        }
    },

    getWatchedQuestions: function (filter, page) {
        var gr = new GlideRecord(this.table.watchedTags);
        gr.addQuery('userid', gs.getUserID());
        gr.query();
        if (gr.getRowCount() == 0) return {
            results: 0,
            type: 'question'
        };

        var tids = [];
        while (gr.next()) tids.push(gr.getValue('tag'));

        var gr2 = new GlideRecord(this.table.question);
        var grj = gr2.addJoinQuery(this.table.tagQuestion);
        if (tids.length > 0) grj.addCondition('tags', tids[0]);
        for (var i = 1; i < tids.length; i++) grj.addOrCondition('tags', tids[i]);

        return new x_nuvo_ko.QuestionUtil().paginate(gr2, filter, page);
    },

    type: 'TagUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>Nicholas.Durkin@nuvolo.com</sys_created_by>
        <sys_created_on>2019-07-15 20:25:07</sys_created_on>
        <sys_id>4cda14abdb6e3b408fdd3df3399619a5</sys_id>
        <sys_mod_count>108</sys_mod_count>
        <sys_name>TagUtil</sys_name>
        <sys_package display_value="Knowledge Overflow" source="x_nuvo_ko">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Knowledge Overflow">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_scope>
        <sys_update_name>sys_script_include_4cda14abdb6e3b408fdd3df3399619a5</sys_update_name>
        <sys_updated_by>Nicholas.Durkin@nuvolo.com</sys_updated_by>
        <sys_updated_on>2019-07-31 13:39:26</sys_updated_on>
    </sys_script_include>
</record_update>
